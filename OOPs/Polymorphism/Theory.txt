Polymorphism --> Poly(Many) + Morphism(Form) --> one name many forms

When an object perform different different task in different different circumstances than this concept is known as polymorphism.

How to achieve polymorphism...
Note --> Polymorphism is only achieved by methods
Note --> Data members doesn't play any role in achieving polymorphism

There are two types or way of polymorphism
1. Compile time/ Early binding/ Method Overloading/ Static binding
    --> when methods bounds with their functionalities at compile time.


2. Runtime/ Late binding/ Method Overriding/ Dynamic binding
    --> When methods bounds with their functionalities at runtime.


==> Method Overloading
    --> There is only one way to achieve method overloading by changing the parameters list of a method
        -> but there are two ways to do so ...
            1. Changing the number of parameters
            2. Changing the data types of parameters
                -> Vise Versa is not allowed can cause ambiguity error
                    Example : https://github.com/monukd01dev/Java/blob/master/OOPs/Polymorphism/OverLoading/src/AmbiguityError.java

==> Method Overriding (Is-A-Relationship)
    --> Without Is-A-Relationship we cannot achieve Method Overriding child and parent classes is necessary to achieve runtime polymorphism.
        -> When parent class and child class have exact same method (parameters are also same exact).
            Example : https://github.com/monukd01dev/Java/blob/master/OOPs/Polymorphism/OverRiding/src/Child.java

*==> OOPs When things have same Names
1. Data Shadowing -> Instance variable and method Locals
2. Method OverRiding -> Child and parent Methods
3. Data OverWrite -> Child and Parent Data Members...

Now main thing to notice here is Data OverWrite...

What is Data OverWrite?
when parent class data member and child class data member both are having exact same names then this concept is known as Data OverWrite.
--> here also priority always goes to local...
    Example : https://github.com/monukd01dev/Java/blob/master/OOPs/Polymorphism/OverRiding/src/DataOverWrite.java


Super Keyword
What is super keyword in java?
Super keyword in java is a reference variable with store the reference id of immediate parent class instance(object).

Point to note : Whenever we create an instance of child class, an instance of parent class is created implicitly which is referenced by Super reference variable.

Uses of Super Keyword :-
1. super can be used to refer the data member of immediate parent class instance.
2. super can be used to invoke methods of immediate parent class.
3. super() can be used to invoke the constructor of immediate parent class.

Note : super cannot be referenced through static context
